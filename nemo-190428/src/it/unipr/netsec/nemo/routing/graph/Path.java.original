package it.unipr.netsec.nemo.routing.graph;


import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;


/** A Path.
 */
public class Path {

	/** Nodes */
	ArrayList<Node> nodes;

	/** Edges */
	ArrayList<Edge> edges;

	
	/** Creates a new empty path. */
	public Path() {
		this.nodes=new ArrayList<Node>();
		this.edges=new ArrayList<Edge>();
	}

	
	/** Creates a new path.
	 * @param root the root node of the path */
	public Path(Node root) {
		this.nodes=new ArrayList<Node>();
		this.edges=new ArrayList<Edge>();
		setRoot(root);
	}

	
	/** Creates a new path.
	 * @param root the root node of the path */
	public Path(Edge[] edges) {
		this.nodes=new ArrayList<Node>();
		this.edges=new ArrayList<Edge>();
		this.nodes.add(edges[0].getSourceNode());
		for (Edge e: edges) {
			this.edges.add(e);
			this.nodes.add(e.getDestNode());
		}
	}

	
	/** Creates a copy.
	 * @param path a path to be copied */
	public Path(Path path) {
		nodes=new ArrayList<Node>(path.nodes);
		edges=new ArrayList<Edge>(path.edges);		
	}

	
	/** Sets the root.
	 * @param root the root node of the path */
	public void setRoot(Node root) {
		if (root==null) throw new RuntimeException("Impossible to set 'null' root");
		// else
		if (nodes.size()>0) throw new RuntimeException("Impossible to set the root of a not empty path");
		// else
		nodes.add(root);
	}

	
	/** Adds a new edge to the path.
	 * @param edge the new edge */
	public void add(Edge edge) {
	    if (nodes.size()==0) throw new RuntimeException("Impossible to add an edge to a path without a root");
		// else
		if (edge==null || !edge.getSourceNode().equals(nodes.get(nodes.size()-1))) throw new RuntimeException("Impossible to add edge '"+edge+"' to node '"+nodes.get(nodes.size()-1)+"'");
		// else
	    edges.add(edge);
		nodes.add(edge.getDestNode());
	}

	
	/** Gets the size of the path.
	 * @return the number of nodes of the path */
	public int size() {
		return nodes.size();
	}
	
	
	/** Gets a copy of this path.
	 * @return a copy of this path */
	/*public Path copy() {
		Path path=new Path();
		path.nodes=new ArrayList<Node>(nodes);
		path.edges=new ArrayList<Edge>(edges);
		return path;
	}*/

	
	/** Appends a path to the end of this path.
	 * @param path the path to be appended */
	public void append(Path path) {
		if (path.nodes.size()==0) return;
		// else
		if (!path.nodes.get(0).equals(nodes.get(nodes.size()-1))) throw new RuntimeException("Impossible to append a path with root '"+path.nodes.get(0)+"' to this path with end node '"+nodes.get(nodes.size()-1)+"'");
		// else
		for (int i=0; i<path.edges.size(); i++) add(path.edges.get(i));
	}

	
	@Override
	public boolean equals(Object o) {
		if (!(o instanceof Path)) return false;
		// else
		Path path=(Path)o;
		if (size()!=path.size()) return false;
		for (int i=0; i<edges.size(); i++) if (!edges.get(i).equals(path.edges.get(i))) return false;
		// else
		for (int i=0; i<nodes.size(); i++) if (!nodes.get(i).equals(path.nodes.get(i))) return false;
		// else
		return true;
	}


	/** Whether it contains a given node.
	 * @param node the node
	 * @return <pre>true</pre> if it contains the node */
	public boolean containsNode(String node) {
		return nodes.contains(node);
	}

	
	/** Whether it contains a given edge.
	 * @param edge the edge
	 * @return <pre>true</pre> if it contains the edge */
	public boolean containsEdge(String edge) {
		return edges.contains(edge);
	}

	
	/** Gets a node iterator.
	 * @return the iterator */
	public Iterator<Node> getNodeIterator() {
		return nodes.iterator();
	}

	
	/** Gets the node path.
	 * @return the list of nodes */
	public List<Node> getNodePath() {
		return nodes;
	}

	
	/** Gets an edge iterator.
	 * @return the iterator */
	public Iterator<Edge> getEdgeIterator() {
		return edges.iterator();
	}
    

	/** Gets the edge path.
	 * @return the list of edges */
	public List<Edge> getEdgePath() {
		return edges;
	}


	/** Gets the length of the path.
	 * @return the number of edges of the path */
	public int length() {
		return edges.size();
	}
	
	
	@Override
	public String toString() {
		return Arrays.toString(nodes.toArray());
	}
}
